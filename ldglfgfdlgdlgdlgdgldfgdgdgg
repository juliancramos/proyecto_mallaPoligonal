[1mdiff --git a/funciones (1).cxx b/funciones (1).cxx[m
[1mdeleted file mode 100644[m
[1mindex 30bdb7d..0000000[m
[1m--- a/funciones (1).cxx[m	
[1m+++ /dev/null[m
[36m@@ -1,174 +0,0 @@[m
[31m-#include <iostream>[m
[31m-#include <stdio.h>[m
[31m-#include <string>[m
[31m-#include <sstream>[m
[31m-#include <vector>[m
[31m-#include "header.h"[m
[31m-[m
[31m-using namespace std;[m
[31m-[m
[31m-vector<string> separarComando(const string &entrada) {[m
[31m-    vector<string> partes;[m
[31m-    istringstream stream(entrada);[m
[31m-    string parte;[m
[31m-[m
[31m-    while (stream >> parte) {[m
[31m-        partes.push_back(parte);[m
[31m-    }[m
[31m-    return partes;[m
[31m-}[m
[31m-[m
[31m-void ayuda(const string &comando) {[m
[31m-    if (comando.empty() || comando == "ayuda") {[m
[31m-        cout << "⋆⁺₊⋆ ☀︎ ⋆⁺₊⋆⋆⁺₊⋆ ☀︎ ⋆⁺₊⋆⋆⁺₊⋆ ☀︎ ⋆⁺₊⋆⋆⁺₊⋆ ☀︎ ⋆⁺₊⋆\n";[m
[31m-        cout << "            Comandos disponibles             \n";[m
[31m-        cout << "⋆⁺₊⋆ ☀︎ ⋆⁺₊⋆⋆⁺₊⋆ ☀︎ ⋆⁺₊⋆⋆⁺₊⋆ ☀︎ ⋆⁺₊⋆⋆⁺₊⋆ ☀︎ ⋆⁺₊⋆\n\n";[m
[31m-        cout << "\n\033[1mGestionar de información básica de objetos 3D, a partir de archivos de mallas.\033[0m\n";[m
[31m-        cout << "1.Cargar\n";[m
[31m-        cout << "2.Listado\n";[m
[31m-        cout << "3.Envolvente\n";[m
[31m-        cout << "4.Descargar\n";[m
[31m-        cout << "5.Guardar\n";[m
[31m-        cout << "6.Salir\n\n";[m
[31m-        cout << "⋆⁺₊⋆ ☀︎ ⋆⁺₊⋆⋆⁺₊⋆ ☀︎ ⋆⁺₊⋆⋆⁺₊⋆ ☀︎ ⋆⁺₊⋆⋆⁺₊⋆ ☀︎ ⋆⁺₊⋆\n\n";[m
[31m-        cout << "\n\033[1mIdentificar puntos (vértices) más cercanos en los objetos.\033[0m\n";[m
[31m-        cout << "7.v_cercano\n";[m
[31m-        cout << "⋆⁺₊⋆ ☀︎ ⋆⁺₊⋆⋆⁺₊⋆ ☀︎ ⋆⁺₊⋆⋆⁺₊⋆ ☀︎ ⋆⁺₊⋆⋆⁺₊⋆ ☀︎ ⋆⁺₊⋆\n\n";[m
[31m-        cout << "\n\033[1mIdentificar las rutas más cortas que conectan diferentes vértices dentro de los objetos.\033[0m\n";[m
[31m-        cout << "8.ruta_corta\n";[m
[31m-    } [m
[31m-    else if (comando == "cargar") {[m
[31m-        cout << "\n\033[1mDescripción: cargar nombre_archivo\033[0m\n";[m
[31m-        cout << "Carga en memoria la información del objeto contenido en el archivo especificado. El comando debe estructurar la información a partir del archivo de forma que sea fácil recuperar los datos posteriormente.\n\n";[m
[31m-        cout << "\n\033[1mMensaje de éxito\033[0m\n";[m
[31m-        cout << "El objeto ha sido cargado exitosamente desde el archivo especificado.\n\n";[m
[31m-        cout << "\033[1mMensajes de error\033[0m\n";[m
[31m-        cout << "1. Archivo vacío o incompleto: El archivo no contiene un objeto 3D válido.\n";[m
[31m-        cout << "2. Archivo no existe: El archivo no existe o es ilegible.\n";[m
[31m-        cout << "3. Objeto ya existe: El objeto ya ha sido cargado en memoria.\n\n";[m
[31m-    } [m
[31m-    else if (comando == "listado") {[m
[31m-        cout << "\n\033[1mDescripción\033[0m\n";[m
[31m-        cout << "Lista los objetos cargados actualmente en memoria, junto con la información básica de cada uno: cantidad de puntos, de aristas y de caras.\n\n";[m
[31m-        cout << "\n\033[1mMensaje de éxito\033[0m\n";[m
[31m-        cout << "Hay n objetos en memoria:\n nombre_objeto_1 contiene n_1 vertices, a_1 aristas y c_1 caras.\n nombre_objeto_2 contiene n_2 vertices, a_2 aristas y c_2 caras...\n\n";[m
[31m-        cout << "\033[1mMensajes de error (Memoria vacía)\033[0m\n";[m
[31m-        cout << "Ningún objeto ha sido cargado en memoria.\n\n";[m
[31m-    } [m
[31m-        [m
[31m-    else if (comando == "envolvente") {[m
[31m-        cout << "\n\033[1mDescripción: Envolvente\033[0m\n";[m
[31m-        cout << "Calcula la caja envolvente que incluye a todos los objetos cargados actualmente en memoria. La caja envolvente se agrega como un nuevo objeto en memoria, asignándole automáticamente el nombre env_global.\n\n";[m
[31m-        cout << "\n\033[1mMensaje de éxito\033[0m\n";[m
[31m-        cout << "La caja envolvente de los objetos en memoria se ha generado con el nombre env_global y se ha agregado a los objetos en memoria.\n\n";[m
[31m-        cout << "\033[1mMensajes de error\033[0m\n";[m
[31m-        cout << "Ningún objeto ha sido cargado en memoria.\n\n";[m
[31m-[m
[31m-        cout << "\n\033[1mEnvolvente nombre_objeto\033[0m\n";[m
[31m-        cout << "Calcula la caja envolvente del objeto identificado por nombre_objeto. La caja envolvente se agrega como un nuevo objeto en memoria, asignándole automáticamente el nombre env_nombre_objeto.\n\n";[m
[31m-        cout << "\n\033[1mMensaje de éxito\033[0m\n";[m
[31m-        cout << "La caja envolvente del objeto nombre_objeto se ha generado con el nombre env_nombre_objeto y se ha agregado a los objetos en memoria.\n\n";[m
[31m-        cout << "\033[1mMensajes de error\033[0m\n";[m
[31m-        cout << "El objeto nombre_objeto no ha sido cargado en memoria.\n\n";[m
[31m-        }  [m
[31m-    else if (comando == "descargar") {[m
[31m-        cout << "\n\033[1mDescripción: Descargar nombre_objeto\033[0m\n";[m
[31m-        cout << "Descarga de la memoria toda la información básica del objeto identificado por nombre_objeto.\n\n";[m
[31m-        cout << "\n\033[1mMensaje de éxito\033[0m\n";[m
[31m-        cout << "El objeto nombre_objeto ha sido eliminado de la memoria de trabajo.\n\n";[m
[31m-        cout << "\033[1mMensajes de error\033[0m\n";[m
[31m-        cout << "El objeto nombre_objeto no ha sido cargado en memoria.\n\n";[m
[31m-    } [m
[31m-    else if (comando == "guardar") {[m
[31m-        cout << "\n\033[1mDescripción: Guardar nombre_objeto nombre_archivo\033[0m\n";[m
[31m-        cout << "Escribe en un archivo de texto, identificado por nombre_archivo, la información básica del objeto identificado por nombre_objeto.\n\n";[m
[31m-        cout << "\n\033[1mMensaje de éxito\033[0m\n";[m
[31m-        cout << "La información del objeto nombre_objeto ha sido guardada exitosamente en el archivo nombre_archivo.\n\n";[m
[31m-        cout << "\033[1mMensajes de error\033[0m\n";[m
[31m-        cout << "El objeto nombre_objeto no ha sido cargado en memoria.\n\n";[m
[31m-    } [m
[31m-    else if (comando == "v_cercano") {[m
[31m-        cout << "\n\033[1mDescripción: v_cercano px py pz nombre_objeto\033[0m\n";[m
[31m-        cout << "Identifica el vértice del objeto nombre_objeto más cercano (en términos de la distancia euclidiana) al punto indicado por las coordenadas px , py y pz . Informa en pantalla el índice del vértice, los valores actuales de sus coordenadas, y la distancia a la cual se encuentra del punto dado.\n\n";[m
[31m-        cout << "\n\033[1mMensaje de éxito\033[0m\n";[m
[31m-        cout << "El vertice i (vx ,vy ,vz ) del objeto nombre_objeto es el más cercano al punto (px ,py ,pz ), a una distancia de valor_distancia \n\n";[m
[31m-        cout << "\033[1mMensajes de error\033[0m\n";[m
[31m-        cout << "El objeto nombre_objeto no ha sido cargado en memoria.\n\n";[m
[31m-[m
[31m-        cout << "\n\033[1mDescripción: v_cercano px py pz\033[0m\n";[m
[31m-        cout << "Identifica el vértice del objeto nombre_objeto más cercano (en términos de la distancia euclidiana) al punto indicado por las coordenadas px , py y pz . Informa en pantalla el índice del vértice, los valores actuales de sus coordenadas, y la distancia a la cual se encuentra del punto dado.\n\n";[m
[31m-        cout << "\n\033[1mMensaje de éxito\033[0m\n";[m
[31m-        cout << " El vertice i (vx ,vy ,vz ) del objeto nombre_objeto es el más cercano al punto (px ,py ,pz ), a una distancia de valor_distancia .\n\n";[m
[31m-        cout << "\033[1mMensajes de error\033[0m\n";[m
[31m-        cout << "Ningun objeto ha sido cargado en me